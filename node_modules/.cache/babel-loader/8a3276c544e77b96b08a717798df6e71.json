{"ast":null,"code":"import { useReducer, useMemo, useEffect } from \"react\";\nlet stores = {};\nlet subscribers = {};\nconst REDUX_DEVTOOL_SET_STATE = \"REDUX_DEVTOOL_SET_STATE\";\n\nconst withDevTools = name => {\n  return name && process.env.NODE_ENV === \"development\" && typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION__;\n};\n\nconst devToolReducer = reducer => (state, action) => {\n  if (action.type === REDUX_DEVTOOL_SET_STATE) {\n    return action.state;\n  } else {\n    return reducer(state, action);\n  }\n};\n\nfunction useReducerWithThunk(reducer, initialState, name) {\n  let memoizedReducer = reducer;\n  let shouldConfigDevTools = withDevTools(name);\n  const nameWithUniqueNameSpace = getReducerName(name); // Memoizing to prevent recreation of devtoolReducer on each render.\n\n  if (shouldConfigDevTools) {\n    memoizedReducer = useMemo(() => devToolReducer(reducer), [reducer]);\n  }\n\n  const [state, dispatch] = useReducer(memoizedReducer, initialState);\n  useEffect(() => {\n    if (shouldConfigDevTools) {\n      if (stores[name]) {\n        throw new Error(\"More than one useReducerWithThunk have same name\");\n      }\n\n      stores[nameWithUniqueNameSpace] = window.__REDUX_DEVTOOLS_EXTENSION__(reducer, initialState, {\n        name: nameWithUniqueNameSpace\n      });\n      subscribers[nameWithUniqueNameSpace] = stores[nameWithUniqueNameSpace].subscribe(() => {\n        dispatch({\n          type: REDUX_DEVTOOL_SET_STATE,\n          state: stores[nameWithUniqueNameSpace].getState()\n        });\n      });\n    }\n\n    return () => {\n      if (shouldConfigDevTools) {\n        subscribers[nameWithUniqueNameSpace]();\n        subscribers[nameWithUniqueNameSpace] = undefined;\n        stores[nameWithUniqueNameSpace] = undefined;\n      }\n    };\n  }, []);\n\n  const getState = () => state;\n\n  const customDispatch = action => {\n    if (typeof action === \"function\") {\n      return action(customDispatch, getState);\n    } else {\n      if (shouldConfigDevTools && stores[nameWithUniqueNameSpace]) {\n        stores[nameWithUniqueNameSpace].dispatch(action);\n      } else {\n        dispatch(action);\n      }\n    }\n  };\n\n  return [state, customDispatch];\n}\n\nconst getReducerName = name => {\n  return \"userReducerThunk_\" + name;\n};\n\nexport default useReducerWithThunk;","map":{"version":3,"sources":["/Users/jennyhuoh/Desktop/react-midterm/node_modules/use-reducer-thunk/src/index.js"],"names":["useReducer","useMemo","useEffect","stores","subscribers","REDUX_DEVTOOL_SET_STATE","withDevTools","name","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","devToolReducer","reducer","state","action","type","useReducerWithThunk","initialState","memoizedReducer","shouldConfigDevTools","nameWithUniqueNameSpace","getReducerName","dispatch","Error","subscribe","getState","undefined","customDispatch"],"mappings":"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","sourcesContent":["import { useReducer, useMemo, useEffect } from \"react\";\n\nlet stores = {};\nlet subscribers = {};\n\nconst REDUX_DEVTOOL_SET_STATE = \"REDUX_DEVTOOL_SET_STATE\";\nconst withDevTools = (name) => {\n  return (\n    name &&\n    process.env.NODE_ENV === \"development\" &&\n    typeof window !== \"undefined\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION__\n  );\n};\n\nconst devToolReducer = (reducer) => (state, action) => {\n  if (action.type === REDUX_DEVTOOL_SET_STATE) {\n    return action.state;\n  } else {\n    return reducer(state, action);\n  }\n};\n\nfunction useReducerWithThunk(reducer, initialState, name) {\n  let memoizedReducer = reducer;\n  let shouldConfigDevTools = withDevTools(name);\n  const nameWithUniqueNameSpace = getReducerName(name);\n\n  // Memoizing to prevent recreation of devtoolReducer on each render.\n  if (shouldConfigDevTools) {\n    memoizedReducer = useMemo(() => devToolReducer(reducer), [reducer]);\n  }\n\n  const [state, dispatch] = useReducer(memoizedReducer, initialState);\n\n  useEffect(() => {\n    if (shouldConfigDevTools) {\n      if (stores[name]) {\n        throw new Error(\"More than one useReducerWithThunk have same name\");\n      }\n\n      stores[nameWithUniqueNameSpace] = window.__REDUX_DEVTOOLS_EXTENSION__(\n        reducer,\n        initialState,\n        {\n          name: nameWithUniqueNameSpace,\n        }\n      );\n\n      subscribers[nameWithUniqueNameSpace] = stores[\n        nameWithUniqueNameSpace\n      ].subscribe(() => {\n        dispatch({\n          type: REDUX_DEVTOOL_SET_STATE,\n          state: stores[nameWithUniqueNameSpace].getState(),\n        });\n      });\n    }\n\n    return () => {\n      if (shouldConfigDevTools) {\n        subscribers[nameWithUniqueNameSpace]();\n        subscribers[nameWithUniqueNameSpace] = undefined;\n        stores[nameWithUniqueNameSpace] = undefined;\n      }\n    };\n  }, []);\n\n  const getState = () => state;\n\n  const customDispatch = (action) => {\n    if (typeof action === \"function\") {\n      return action(customDispatch, getState);\n    } else {\n      if (shouldConfigDevTools && stores[nameWithUniqueNameSpace]) {\n        stores[nameWithUniqueNameSpace].dispatch(action);\n      } else {\n        dispatch(action);\n      }\n    }\n  };\n\n  return [state, customDispatch];\n}\n\nconst getReducerName = (name) => {\n  return \"userReducerThunk_\" + name;\n};\n\nexport default useReducerWithThunk;\n"]},"metadata":{},"sourceType":"module"}